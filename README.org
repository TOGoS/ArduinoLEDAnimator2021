#+TITLE: PowerCube

[2019-01-09]

The goal of this project is to create a framework for ESP8266-controlled
battery and light controllers.

If you want to basically throw all similar Arduino/ESP8266 projects in here
so they can share code more easily or whatever, that would probably be fine.

- Use it at home!
- Take it on the road!
- One kernel, multiple modules!
- It's a WiFi hub!
- Super flexible software; maybe do like the LED lamps w/ built-in WiFi network
- How to connect to existing WiFi?
  - For starters, standardize configuration over serial port
  - If going the Forth route, will need to add [refcounted] strings!
- https://iot.stackexchange.com/questions/651/how-can-i-easily-configure-wi-fi-on-a-smart-device-without-a-screen
  - https://en.wikipedia.org/wiki/Wi-Fi_Protected_Setup

*** Desired sofware features

- WiFi repeater
  - Look into 
- Reporting via MQTT or by serial
- Display via I2C OLED screen
- Dynamic configuration over WiFi

- Play around with https://github.com/martin-ger/esp_wifi_repeater for inspiration
- Look into using ENC28J60 for connecting to ethernet

- Maybe have a ComputerSimulator in it, just to test out the idea
  - Alternatively, just make a virtual OLED display - send vt-100 commands on the serial port
  - Ideally do both: use ComputerSimulator internally to drive the [virtual] LED display


*** Desired hardware features

- 3 power inputs that can be independently voltage-sampled and connected to Vbatt
  - 12V power supply
  - 12V external battery
  - 12V internal battery
  - 9V internal backup battery
- A ~12V output port
- OLED screen for showing status

** Software design

*** Kernel

Facilitiates communication between components.

Components are named.

Components communicate by sending messages through the kernel.
Messages have a scope bit that indicates how far they go.

*** Components

Things that can be added at runtime;
usually for interfacing with hardware.

Should have ability to exclude module classes at compile time.

*** Path conventions

For MQTT, assume a device name path prefix.

For OSC interfaces, shorter names for setters might make sense, e.g. ~somelight/state on~ instead of ~somelight/state/set on~.

The device:
- ~$device-name / status~ :: ~online~, ~disconnected~ (vaguely inspired by https://homieiot.github.io/specification/#device-behavior)

For things that can be enabled/disabled:
- ~$component-name / state~ ::
  - ~disabled~ :: explicitly turned off
  - ~enabled~ :: enabled but no further state information known
  - ... :: other states when enabled

Simple digital switches:
- ~$component-name / state~ :: In addition to the possible ~enabled~, ~disabled~ (which don't indicate the switch state):
  - ~on~
  - ~off~

Variable-brightness lights:
- ~$component-name / state~ :: similar to digital switch; when 'off', LED should be unpowered
- ~$component-name / brightness~ :: (0-1) brightness of light

RGB[W] lights:
- ~$component-name / state~ :: similar to digital switch; when 'off', LED should be unpowered
- ~$component-name / brightness~ :: brightness (from 0-1) of the light, independent of color
- ~$component-name / color~ :: color of the light

